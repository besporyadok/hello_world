project(xr_3da)

list(APPEND DIRS "${PROJECT_SOURCE_DIR}" "blenders") 

add_dir("${DIRS}")
exclude_from_build("${PROJECT_SOURCE_DIR}/BodyInstance.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/CameraDebug.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/EffectorFall.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FCached.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FDetailPatch.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FLightsController.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FProgressive.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FProgressiveFixedVisual.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FShadowForm.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FTreeVisual.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FVisual.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FastSprite.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FastSpriteRail.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/ISpatial_q_sphere.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/LightTrack.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/ModelPool.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/NET_Client.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/NET_Server.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/PGObject.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/PSLibrary.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/PSObject.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/ParticleEffect.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/ParticleGroup.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/SkeletonCalculate.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/Stats_Timer.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/Texture.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/cameralook.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/class.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/class_registry.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/class_rep.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/error.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/fcontroller.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/crc32.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/create_class.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/find_best_match.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/function.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/object.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/object_rep.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/open.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/pcall.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/psvisual.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/implicit_cast.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/link_compatibility.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/ref.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/scope.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/stack_content_by_name.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/tempobject.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/testbed.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/videoplayer.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/weak_ref.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/x_ray_.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/xrParticlesLib.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/xr_area_movement.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/xr_creator.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/xr_creator_check_textures.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/xr_effsun.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/xr_object_list_allocator.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/FShotMarkVisual.cpp")
exclude_from_build("${PROJECT_SOURCE_DIR}/Image.cpp")

add_executable(${PROJECT_NAME} WIN32 ${${PROJECT_NAME}__SOURCES} "${PROJECT_SOURCE_DIR}/resource.rc")

target_compile_definitions(${PROJECT_NAME} PRIVATE ENGINE_BUILD)
target_include_directories(${PROJECT_NAME} PRIVATE xrRender_R1)
target_precompile_headers(${PROJECT_NAME} PRIVATE stdafx.h)

set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "/FIXED:NO /NODEFAULTLIB:libcmt.lib")
target_link_libraries(${PROJECT_NAME} vfw32.lib ogg_static.lib theora_static.lib)